version: "3.2"

networks:
  pyton_flask_rest_api:

services:

  python:
    container_name: python
    build:
      context: './app/'
    # command: python3 -Xfrozen_modules=off -m flask run --host=0.0.0.0 
    ports:
      - "5002:5002"
      - "5678:5678" 
    volumes:
      - ./app:/app
    networks:
      - pyton_flask_rest_api
    environment:
      - FLASK_APP=controller.user
      - FLASK_ENV=development
      - PYDEVD_DISABLE_FILE_VALIDATION=1

  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    # build:
    #   context: './nginx/'
    ports:
      - "98:80"
    volumes:
      - ./app:/app
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - python
    networks:
      - pyton_flask_rest_api

  mysql_python:
    container_name: mysql_python
    image: arm64v8/mysql:oracle
    ports:
      - "33062:3306"
    volumes:
      # - ./mysql:/var/lib/mysql
      - ./mysql:/tmp/mysql-data
      - ./db_dump:/docker-entrypoint-initdb.d  # Mount SQL script
    restart: always # restart unless stopped manually
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: pwd
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATADIR: /tmp/mysql-data
    depends_on:
      - python
      - data_volume
    networks:
      - pyton_flask_rest_api

  data_volume: # to ensure volumes r mounted before starting the mysql container
    image: busybox 
    volumes:
      - ./mysql:/tmp/mysql-data
      - ./db_dump:/docker-entrypoint-initdb.d
    entrypoint: /bin/sh -c 'echo "Data volume container started successfully." && sleep infinity'
    restart: "no"
    networks:
      - pyton_flask_rest_api

  phpmyadmin:
    container_name: phpmyadmin_python
    image: arm64v8/phpmyadmin
    restart: always
    environment:
      # PMA_HOST: mysql_python
      PMA_HOST: docker.for.mac.localhost
      PMA_PR: https
      PMA_PORT: 33062
      PMA_USER: root
      PMA_PASSWORD: pwd
    ports:
      - "8099:80"
    depends_on:
      - mysql_python
    networks:
      - pyton_flask_rest_api

  # unittests:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   volumes:
  #     - .:/app/tests/
  #   command: python -m unittest discover
  #   depends_on:
  #     - python
  #     - mysql_python
  #   networks:
  #     - pyton_flask_rest_api